plugins {
    id 'net.neoforged.moddev' version '2.0.32-beta'
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    api
    data
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    implementation sourceSets.api.output
    dataImplementation sourceSets.api.output
    dataImplementation sourceSets.main.output
    testImplementation "org.junit.jupiter:junit-jupiter:${project.junit_version}"
    testImplementation "net.neoforged:testframework:${project.neo_version}"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

neoForge {
    version = project.neo_version
    addModdingDependenciesTo(sourceSets.api)
    addModdingDependenciesTo(sourceSets.data)

    mods {
        "${mod_id}" {
            sourceSet sourceSets.api
            sourceSet sourceSets.main
        }
        "${mod_id}data" {
            sourceSet sourceSets.api
            sourceSet sourceSets.main
            sourceSet sourceSets.data
        }
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.console.level', 'debug'
        }
        client {
            client()
        }
        data {
            data()
            loadedMods = [mods."${mod_id}data"]
            programArguments.addAll '--mod', "${mod_id}", '--all',
                    '--output',   file('src/generated/resources/').getAbsolutePath(),
                    '--existing', file('src/main/resources/').getAbsolutePath()
        }
        server {
            server()
            programArgument '--nogui'
        }
    }

    unitTest {
        enable()
        testedMod = mods."${mod_id}"
    }
}

tasks.named('processResources', ProcessResources) {
    var replaceProperties = [
            mc_version       : mc_version,
            mc_version_range : mc_version_range,
            neo_version      : neo_version,
            neo_version_range: neo_version_range,
            loader_version   : loader_version,
            mod_id           : mod_id,
            mod_version      : mod_version,
            mod_name         : mod_name,
            mod_authors      : mod_authors,
            mod_credits      : mod_credits,
            mod_logo         : mod_logo,
            mod_description  : mod_description,
            mod_license      : mod_license,
    ]
    inputs.properties replaceProperties
    filesMatching('META-INF/neoforge.mods.toml') {
        expand replaceProperties
    }
}

test {
    useJUnitPlatform()
}
